service: mailgunretry
provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  memorySize: 3008

# custom variables
custom:
  tableName: mailgunretry-db
  topicName: mailgunretry-sns
  topicArn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.topicName}
  tableArn: arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.tableName}

# required plaugins
plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

# lambda functions
functions:
  app:
    handler: dist/index.default
    memorySize: 3008
    events:
      - http:
          path: /api/webhook
          method: POST
          cors: true
      - sns:
          arn: ${self:custom.topicArn}
    # function roles
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: ${self:custom.tableArn}
      - Effect: "Allow"
        Action:
          - "sns:Publish"
        Resource: ${self:custom.topicArn}
    environment:
      MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}
      TABLE_NAME: ${self:custom.tableName}
      AWS_SNS_TOPIC_ARN: ${self:custom.topicArn}
      
# function resources
resources:
  Resources:
    MySnsTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: ${self:custom.topicName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
